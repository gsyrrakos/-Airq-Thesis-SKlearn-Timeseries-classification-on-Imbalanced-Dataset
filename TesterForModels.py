import json

import pandas as pd
import glob
import os
import os
import glob
import pandas as pd
import re
from datetime import datetime as dt
import os
import datetime

import IPython
import IPython.display
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow as tf
import pandas as pd
import glob

from sklearn.feature_selection import SelectFromModel
from sklearn.preprocessing import StandardScaler, MaxAbsScaler, Normalizer
from sklearn.preprocessing import MinMaxScaler

from FeuturesExport import func1, funcsvm, getDtat

mpl.rcParams['figure.figsize'] = (8, 6)
mpl.rcParams['axes.grid'] = False

path2 = "F://sensor smoking//Feutures//"
path1 = "F://sensor_normal//Feutures//"

name1 = 'Feautures_AA_normal_1.csv'
name2 = 'Feautures_AA_Smok_1.csv'

name1 = 'Feautures_AA_normal_1.csv'
name2 = 'Feautures_AA_Smok_1.csv'

path3 = "F://sensor_cooking//Feautures//"
name3 = 'Feautures_AA_Cooking_1.csv'

path1 = "G://metrhseis//normal//ff//"
path2 = "G://metrhseis//smoke//ff//"
path3 = "G://metrhseis//cook//ff//"
path4 = "G://metrhseis//ypoloipa//ff//"

os.chdir(path1)
i = 0
dfNormal = pd.DataFrame()
for file in glob.glob("*.csv"):
    fil = pd.read_csv(file)
    dfNormal = pd.concat([dfNormal, fil], axis=0)

os.chdir(path3)
i = 0
dfCooking = pd.DataFrame()
for file in glob.glob("*.csv"):
    fil = pd.read_csv(file)
    dfCooking = pd.concat([dfCooking, fil], axis=0)

df2 = dfNormal  # pd.read_csv(path1 + name1)
df1 = pd.read_csv(path2 + name2)
df3 = dfCooking  # pd.read_csv(path3 + name3)
df2 = df2[(df2['NSTDPM2'] <= 0.3)]
df1 = df1[(df1['NSTDPM2'] >= 0.3)]
df3 = df3[(df3['NSTDPM2'] > 0.3)]

print(df1.shape)

print(df3.shape)

plot_cols = ['Increase_RatePM25',
             'NSTDPM2']
plot_features1 = df1[plot_cols]

_ = plot_features1.plot(subplots=True)
plt.title('smoking')

plot_cols = ['Increase_RatePM25',
             'NSTDPM2']
plot_features2 = df2[plot_cols]

_ = plot_features2.plot(subplots=True)
plt.title('normal')

plot_cols = ['Increase_RatePM25',
             'NSTDPM2']
plot_features3 = df3[plot_cols]

_ = plot_features3.plot(subplots=True)
plt.title('cooking')

plt.show()

# now will try the same with joblib
import joblib

# load and test this
'''
mystr=[[1,2,3,4,5,6,7,8,9,11,14,15,25,96,89,52,9,85,89,2,82,1,2,3,4,5,6,7,8],
       [44,430,680,720,800,840,1200,1250,1300,980,454,41,39,37,38,40,44,41,38,42,44,44,41,45,42,40,47,43,46],
       [44,430,680,720,800,840,1200,1250,1300,980,454,41,39,37,38,40,44,41,38,42,44,44,41,45,42,40,47,43,46],
       [44,430,680,720,800,840,1200,1250,1300,980,454,41,39,37,38,40,44,41,38,42,44,44,41,45,42,40,47,43,46],
       [46.3,46.3,46.2,46.2,46.3,46.3,46.3,46.3,46.3,46.2,46.3,46.3,46,45.7,46,46.1,46.2,46.2,46.2,46.2,46.3,46.3,46.4,46.3,46.3,46.3,46.4,46.4,46.5],
       [25.7,25.8,25.7,25.8,25.8,25.8,25.8,25.8,25.8,25.8,25.8,25.8,25.7,25.7,25.7,25.7,25.7,25.8,25.7,25.7,25.7,25.7,25.8,25.7,25.7,25.7,25.7,25.7,25.7],
       ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"]]


jso=[[1,2,3,4,5,6,7,8,9,11,14,15,25,96,89,52,9,85,89,2,82,1,2,3,4,5,6,7,8],
     [7,8,8,7,7,7,7,7,7,7,6,7,6,7,7,7,7,8,7,8,9,9,7,7,7,7,7,7,7],
     [10,10,11,9,8,8,8,8,8,8,7,7,6,8,8,9,8,9,9,9,10,9,8,9,8,8,8,9,9],
     [11,11,11,10,10,10,9,9,10,10,8,7,7,9,8,10,9,9,11,10,11,9,9,11,12,10,9,10,9],
     [52.4,52.6,52.5,52.5,52.3,52.4,52.5,52.4,52.2,52.2,52.2,52.2,52.1,52.3,52.2,52.2,52.2,52.1,52.3,52.2,52.2,52.4,52.4,52.5,52.5,52.4,52.3,52.6,52.7],
     [25.2,25.2,25.1,25.1,25.2,25.2,25.2,25.2,25.2,25.1,25.1,25.1,25.1,25.2,25.2,25.2,25.2,25.2,25.2,25.2,25.1,25.2,25.1,25.2,25.2,25.2,25.2,25.2,25.1],
     ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"]]
     jso = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 96, 89, 52, 9, 85, 89, 2, 82, 1, 2, 3, 4, 5, 6, 7, 8],
             [7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 7, 6, 7, 7, 7, 7, 8, 7, 8, 9, 9, 7, 7, 7, 7, 7, 7, 7],
             [10, 10, 11, 9, 8, 8, 8, 8, 8, 8, 7, 7, 6, 8, 8, 9, 8, 9, 9, 9, 10, 9, 8, 9, 8, 8, 8, 9, 9],
             [11, 11, 11, 10, 10, 10, 9, 9, 10, 10, 8, 7, 7, 9, 8, 10, 9, 9, 11, 10, 11, 9, 9, 11, 12, 10, 9, 10, 9],
             [52.4, 52.6, 52.5, 52.5, 52.3, 52.4, 52.5, 52.4, 52.2, 52.2, 52.2, 52.2, 52.1, 52.3, 52.2, 52.2, 52.2,
              52.1, 52.3, 52.2, 52.2, 52.4, 52.4, 52.5, 52.5, 52.4, 52.3, 52.6, 52.7],
             [25.2, 25.2, 25.1, 25.1, 25.2, 25.2, 25.2, 25.2, 25.2, 25.1, 25.1, 25.1, 25.1, 25.2, 25.2, 25.2, 25.2,
              25.2, 25.2, 25.2, 25.1, 25.2, 25.1, 25.2, 25.2, 25.2, 25.2, 25.2, 25.1],
             ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
              "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29"]]
     
      jso = jso=[[1,2,3,4,5,6,7,8,9,11,14,15,25,96,89,52,9,85,89,2,82,1,2,3,4,5,6,7,8],
     [7,8,8,7,7,7,7,7,7,7,6,7,6,7,7,7,7,8,100,199,250,350,400,500,600,600,600,700,1250],
     [10,10,11,9,8,8,8,8,8,8,7,7,6,8,8,9,80,100,199,250,350,400,8,9,8,8,8,9,9],
     [11,11,11,10,10,10,9,9,10,10,8,7,7,9,8,100,199,250,350,400,11,9,9,11,12,10,9,10,9],
     [52.4,52.6,52.5,52.5,52.3,52.4,52.5,52.4,52.2,52.2,52.2,52.2,52.1,52.3,52.2,52.2,52.2,52.1,52.3,52.2,52.2,52.4,52.4,52.5,52.5,52.4,52.3,52.6,52.7],
     [25.2,25.2,25.1,25.1,25.2,25.2,25.2,25.2,25.2,25.1,25.1,25.1,25.1,25.2,25.2,25.2,25.2,25.2,25.2,25.2,25.1,25.2,25.1,25.2,25.2,25.2,25.2,25.2,25.1],
     ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"]]
     
     
     //smoking
      [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 96, 89, 52, 9, 85, 89, 2, 82, 1, 2, 3, 4, 5, 600, 700, 800],
             [7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 7, 6, 7, 7, 7, 7, 8, 7, 8, 9, 9, 7, 7, 7, 7, 700, 700, 700],
             [10, 10, 11, 9, 8, 8, 8, 8, 8, 8, 7, 7, 6, 8, 8, 9, 8, 9, 9, 9, 10, 9, 8, 9, 8, 8, 800, 900, 900],
             [11, 11, 11, 10, 10, 10, 9, 9, 10, 10, 8, 7, 7, 9, 8, 10, 9, 9, 11, 10, 11, 9, 9, 11, 1200, 1000, 900, 1000, 900],
             [52.4, 52.6, 52.5, 52.5, 52.3, 52.4, 52.5, 52.4, 52.2, 52.2, 52.2, 52.2, 52.1, 52.3, 52.2, 52.2, 52.2,
              52.1, 52.3, 52.2, 52.2, 52.4, 52.4, 52.5, 52.5, 52.4, 52.3, 52.6, 52.7],
             [25.2, 25.2, 25.1, 25.1, 25.2, 25.2, 25.2, 25.2, 25.2, 25.1, 25.1, 25.1, 25.1, 25.2, 25.2, 25.2, 25.2,
              25.2, 25.2, 25.2, 25.1, 25.2, 25.1, 25.2, 25.2, 25.2, 25.2, 25.2, 25.1],
             ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
              "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29"]]
              
              [[1,2,3,4,5,6,7,8,9,11,14,15,25,96,89,52,9,85,89,2,82,1,2,3,4,5,6,7,8],
              [12,13,13,15,13,10,10,9,10,10,12,10,11,11,12,11,11,10,11,10,10,9,10,9,295,336,358,344,221],
              [16,17,18,20,18,14,15,12,15,13,16,14,13,18,19,16,17,14,13,13,12,12,15,13,800,1626,809,1200,441],
              [17,19,22,25,26,21,20,13,20,13,16,17,20,19,22,20,19,15,13,14,12,14,21,16,995,2330,1024,1597,513],
              [75.4,75.3,75.1,75.2,75.3,74.8,74.7,74.7,74.7,74.4,74.3,74.4,74.8,74.9,74.8,74.7,74.7,74.6,74.8,74.7,74.5,74.4,74.3,74.3,74.4,74.6,74.3,74.5,74.2],
              [26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1],
              ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"]]
              
           [[1,2,3,4,5,6,7,8,9,11,14,15,25,96,89,52,9,85,89,2,82,1,2,3,4,5,6,7,8],
       [44,430,680,720,800,840,1200,1250,1300,980,454,41,39,37,38,40,44,41,38,42,44,44,41,45,42,40,47,43,46],
       [44,430,680,720,800,840,1200,1250,1300,980,454,41,39,37,38,40,44,41,38,42,44,44,41,45,42,40,47,43,46],
       [44,430,680,720,800,840,1200,1250,1300,980,454,41,39,37,38,40,44,41,38,42,44,44,41,45,42,40,47,43,46],
       [46.3,46.3,46.2,46.2,46.3,46.3,46.3,46.3,46.3,46.2,46.3,46.3,46,45.7,46,46.1,46.2,46.2,46.2,46.2,46.3,46.3,46.4,46.3,46.3,46.3,46.4,46.4,46.5],
       [25.7,25.8,25.7,25.8,25.8,25.8,25.8,25.8,25.8,25.8,25.8,25.8,25.7,25.7,25.7,25.7,25.7,25.8,25.7,25.7,25.7,25.7,25.8,25.7,25.7,25.7,25.7,25.7,25.7],
       ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"]]   
              
              
              //cooking
              [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 96, 89, 52, 9, 85, 89, 2, 82, 1, 2, 3, 4, 5, 6, 7, 8],
             [7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 7, 6, 7, 7, 7, 7, 8, 7, 8, 9, 9, 7, 7, 25, 26, 26, 28, 29],
             [10, 10, 11, 9, 8, 8, 8, 8, 8, 8, 7, 7, 6, 8, 8, 9, 8, 9, 9, 9, 10, 9, 8, 9, 25, 26, 30, 32, 35],
             [11, 11, 11, 10, 10, 10, 9, 9, 10, 10, 8, 7, 7, 9, 8, 10, 9, 9, 11, 10, 11, 9, 9, 11, 20, 21, 20, 22, 25],
             [52.4, 52.6, 52.5, 52.5, 52.3, 52.4, 52.5, 52.4, 52.2, 52.2, 52.2, 52.2, 52.1, 52.3, 52.2, 52.2, 52.2,
              52.1, 52.3, 52.2, 52.2, 52.4, 52.4, 52.5, 52.5, 52.4, 52.3, 52.6, 52.7],
             [25.2, 25.2, 25.1, 25.1, 25.2, 25.2, 25.2, 25.2, 25.2, 25.1, 25.1, 25.1, 25.1, 25.2, 25.2, 25.2, 25.2,
              25.2, 25.2, 25.2, 25.1, 25.2, 25.1, 25.2, 25.2, 25.2, 25.2, 25.2, 25.1],
             ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
              "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29"]]
              
              [[1,2,3,4,5,6,7,8,9,11,14,15,25,96,89,52,9,85,89,2,82,1,2,3,4,5,6,7,8],[11,10,9,11,9,11,12,13,13,15,13,10,10,9,10,10,12,10,11,11,12,11,11,10,11,10,10,9,10],
              [13,14,15,16,10,14,16,17,18,20,18,14,15,12,15,13,16,14,13,18,19,16,17,14,13,13,12,12,15],
              [14,15,17,19,11,18,17,19,22,25,26,21,20,13,20,13,16,17,20,19,22,20,19,15,13,14,12,14,21],
              [75,74.9,74.8,74.8,74.7,75,75.4,75.3,75.1,75.2,75.3,74.8,74.7,74.7,74.7,74.4,74.3,74.4,74.8,74.9,74.8,74.7,74.7,74.6,74.8,74.7,74.5,74.4,74.3],
              [26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1,26.1],
              ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"]
              
              
              [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 96, 89, 52, 9, 85, 89, 2, 82, 1, 2, 3, 4, 5, 6, 7, 8],
             [51, 48, 49, 47, 49, 47, 47, 46, 45, 47, 47, 44, 39, 42, 44, 46, 48, 47, 47, 47, 43, 41, 38, 37, 36, 36,
              39, 34, 35],
             [78, 71, 73, 65, 75, 72, 71, 70, 66, 69, 69, 65, 63, 62, 66, 69, 74, 70, 69, 69, 64, 61, 56, 52, 58, 56,
              56, 52, 56],
             [93, 82, 87, 73, 79, 85, 86, 80, 72, 72, 81, 73, 71, 69, 73, 74, 79, 78, 78, 79, 71, 66, 65, 57, 60, 61,
              65, 57, 61],
             [64.4, 64.5, 64.4, 64.5, 64.5, 64.5, 64.6, 64.7, 64.8, 64.7, 64.7, 64.8, 64.8, 64.9, 64.9, 65, 65, 65,
              65.1, 65.1, 65.1, 65.1, 65.2, 65.2, 65.3, 65.3, 65.2, 65.3, 65.3],
             [26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
              25.9, 26, 26],
             ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
              "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29"]]
              
              [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 96, 89, 52, 9, 85, 89, 2, 82, 1, 2, 3, 4, 5, 6, 7, 8],
             [17, 18, 17, 16, 16, 16, 16, 18, 18, 17, 18, 20, 19, 15, 15, 19, 18, 18, 19, 77, 80, 33, 41, 46, 45, 65,
              240, 163, 42],
             [24, 27, 25, 23, 23, 25, 23, 29, 27, 25, 25, 29, 27, 26, 25, 25, 26, 25, 27, 112, 127, 50, 61, 72, 68, 101,
              579, 282, 64],
             [30, 30, 33, 27, 31, 32, 25, 32, 30, 27, 25, 30, 30, 29, 28, 27, 29, 26, 27, 125, 142, 57, 69, 76, 74, 108,
              698, 322, 73],
             [63.8, 63.8, 63.8, 63.9, 63.9, 63.9, 63.9, 64, 64, 64, 64.1, 64.3, 64.3, 64.4, 64.4, 64.4, 64.5, 64.5,
              64.5, 64.5, 64.6, 64.4, 64.3, 64.1, 64.1, 64.1, 64.1, 64.1, 64.1],
             [23.8, 23.8, 23.8, 23.8, 23.8, 23.8, 23.8, 23.8, 23.8, 23.8, 23.8, 23.7, 23.7, 23.7, 23.7, 23.7, 23.7,
              23.7, 23.7, 23.7, 23.7, 23.7, 23.7, 23.7, 23.7, 23.8, 23.7, 23.8, 23.8],
             ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
              "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29"]]
              
              [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 96, 89, 52, 9, 85, 89, 2, 82, 1, 2, 3, 4, 5, 6, 7, 8],
             [5, 3, 5, 6, 5, 4, 5, 6, 5, 6, 6, 5, 5, 8, 12, 14, 15, 14, 14, 18, 41, 63, 63, 41, 26, 35, 51, 67, 64],
             [6, 4, 5, 6, 6, 4, 5, 7, 6, 7, 7, 5, 5, 9, 17, 19, 20, 20, 21, 26, 66, 96, 94, 59, 36, 54, 78, 103, 92],
             [7, 4, 6, 6, 7, 4, 8, 9, 7, 9, 8, 5, 5, 10, 19, 22, 21, 20, 23, 30, 69, 108, 104, 65, 38, 62, 85, 114,
              103],
             [46, 46.1, 46.1, 46.2, 46.2, 46.2, 46.3, 46.3, 46.4, 46.4, 46.4, 46.4, 46.4, 46.5, 46.7, 46.6, 46.7, 46.7,
              46.4, 46.6, 47, 47.3, 47.5, 47.5, 47.2, 47, 47.6, 47.9, 48],
             [23.5, 23.5, 23.5, 23.5, 23.5, 23.5, 23.5, 23.6, 23.6, 23.5, 23.6, 23.6, 23.5, 23.6, 23.6, 23.6, 23.6,
              23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6],
             ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
              "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29"]]
              
              
     [[1,2,3,4,5,6,7,8,9,11,14,15,25,96,89,52,9,85,89,2,82,1,2,3,4,5,6,7,8],[12,12,9,11,10,9,10,10,10,9,9,11,9,10,10,11,11,9,10,9,10,10,10,10,9,9,9,10,10],
     [16,15,11,13,14,12,13,14,13,11,12,13,13,14,12,13,16,13,13,12,11,12,14,13,15,13,14,14,14],
     [18,16,12,13,14,14,13,15,13,12,16,16,14,17,14,15,17,14,13,12,11,13,18,15,18,15,14,14,14],
     [44.4,44.4,44.4,44.4,44.4,44.4,44.5,44.5,44.5,44.4,44.5,44.5,44.5,44.7,44.7,44.7,44.7,44.7,44.7,44.7,44.7,44.8,44.8,44.7,44.8,44.8,44.8,44.7,44.7],
     [24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8,24.8],
     ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"]]
     '''

jso = jso =  [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 96, 89, 52, 9, 85, 89, 2, 82, 1, 2, 3, 4, 5, 6, 7, 8],
             [5, 3, 5, 6, 5, 4, 5, 6, 5, 6, 6, 5, 5, 8, 12, 14, 15, 14, 14, 18, 41, 63, 63, 41, 26, 35, 51, 67, 64],
             [6, 4, 5, 6, 6, 4, 5, 7, 6, 7, 7, 5, 5, 9, 17, 19, 20, 20, 21, 26, 66, 96, 94, 59, 36, 54, 78, 103, 92],
             [7, 4, 6, 6, 7, 4, 8, 9, 7, 9, 8, 5, 5, 10, 19, 22, 21, 20, 23, 30, 69, 108, 104, 65, 38, 62, 85, 114,
              103],
             [46, 46.1, 46.1, 46.2, 46.2, 46.2, 46.3, 46.3, 46.4, 46.4, 46.4, 46.4, 46.4, 46.5, 46.7, 46.6, 46.7, 46.7,
              46.4, 46.6, 47, 47.3, 47.5, 47.5, 47.2, 47, 47.6, 47.9, 48],
             [23.5, 23.5, 23.5, 23.5, 23.5, 23.5, 23.5, 23.6, 23.6, 23.5, 23.6, 23.6, 23.5, 23.6, 23.6, 23.6, 23.6,
              23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6, 23.6],
             ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
              "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29"]]




jdata = getDtat(jso)
jdata = json.loads(jdata)
print(jdata)


def KNNTest():
    whatever = joblib.load(
        'C://Users//giorgos//Desktop//AIR_quallityjobilbKNN4pipeline.pkl')  # AIR_quallityjobilb_SVMnorm.pkl AIR_quallityjobilbKNNFFimpo1
    clf = joblib.load('C://Users//giorgos//Desktop//AIR_quallityjobilbKNNFFimpo1pipeline.pkl')
    sel = SelectFromModel(clf, prefit=True)


    df = pd.DataFrame(jdata)
    dfa = func1(df)  # for knn and random
    # df1 = function(dfa, 'min')
    #scal = joblib.load('C://Users//giorgos//Desktop//AIR_quallityjobilb_KNNpipelinescaler.pkl')
    X = dfa
    X = sel.transform(X)

    #rescaledX = scal.transform(X)
    #X = rescaledX
    print(X)

    Ypredict = whatever.predict(X)
    print(Ypredict)
    print(joblib.__version__)


def SVMTest():
    whatever = joblib.load(
        'C://Users//giorgos//Desktop//AIR_quallityjobilb_SVMFFpipeline1.pkl')  # AIR_quallityjobilb_SVMnorm.pkl AIR_quallityjobilbKNNFFimpo1
    clf = joblib.load('C://Users//giorgos//Desktop//AIR_quallityjobilbSVMFFimpo121.pkl')
    sel = SelectFromModel(clf, prefit=True)


    df = pd.DataFrame(jdata)
    dfa = funcsvm(df)  # for knn and random
    # df1 = function(dfa, 'min')
    scal = joblib.load('C://Users//giorgos//Desktop//AIR_quallityjobilb_SVMFFpipelinescaler1.pkl')
    X = dfa
    X = sel.transform(X)

    rescaledX = scal.transform(X)
    X = rescaledX
   # print(X)

    Ypredict = whatever.predict(X)
    print(Ypredict)
    print(joblib.__version__)


def RandTest():
    whatever = joblib.load(
        'C://Users//giorgos//Desktop//AIR_quallityjobilbRandwithff11pipeline.pkl')  # AIR_quallityjobilb_SVMnorm.pkl AIR_quallityjobilbKNNFFimpo1
    clf = joblib.load('C://Users//giorgos//Desktop//AIR_quallityjobilbRandFFimpo11.pkl')
    sel = SelectFromModel(clf, prefit=True)

    df = pd.DataFrame(jdata)
    dfa = func1(df)  # for knn and random
    # df1 = function(dfa, 'min')
    # scal = joblib.load('C://Users//giorgos//Desktop//AIR_quallityjobilb_KNNpipelinescaler.pkl')
    X = dfa
    #X = sel.transform(X)

    # rescaledX = scal.transform(X)
    # X = rescaledX
    #print(X)

    Ypredict = whatever.predict(X)
    print(Ypredict)
    print(joblib.__version__)
print("KNN")
KNNTest()
print("SVM")
SVMTest()
print("Random")
RandTest()

